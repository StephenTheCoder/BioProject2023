import requests

# Getting each animal name and making a sequence
x1 = input("What is the first animal? ")
x2 = input("What is the second animal? ")
x3 = input("What is the third animal? ")

sequences = [x1, x2, x3]
vals = []
names = []

def getVal(name1, name2):
    
    # Run the API for the first animal
    api_url1 = 'https://api.gbif.org/v1/species/match?verbose=true&name={}'.format(name1)
    response1 = requests.get(api_url1)
    if response1.status_code == requests.codes.ok:
        taxonomy1 = response1.json()
        
        # Running data for the first animal
        kingdom1 = taxonomy1.get('kingdom')
        phylum1 = taxonomy1.get('phylum')
        class1 = taxonomy1.get('class')
        order1 = taxonomy1.get('order')
        family1 = taxonomy1.get('family')
        genus1 = taxonomy1.get('genus')

    else:
        # Response fail code
        print("Error:", response1.status_code, response1.text)
        
    # Run the API for the second animal    
    api_url2 = 'https://api.gbif.org/v1/species/match?verbose=true&name={}'.format(name2)
    response2 = requests.get(api_url2)
    if response2.status_code == requests.codes.ok:
        taxonomy2 = response2.json()
        
        # Running data for the second animal
        kingdom2 = taxonomy2.get('kingdom')
        phylum2 = taxonomy2.get('phylum')
        class2 = taxonomy2.get('class')
        order2 = taxonomy2.get('order')
        family2 = taxonomy2.get('family')
        genus2 = taxonomy2.get('genus')

    else:
        
        # Response fail code
        print("Error:", response2.status_code, response2.text)
    
    
    # Running comparison for the z value
    if(genus1 == genus2):
        return 1
    elif(family1 == family2):
        return 2
    elif(order1 == order2):
        return 3
    elif(class1 == class2):
        return 4
    elif(phylum1 == phylum2):
        return 5
    elif(kingdom1 == kingdom2):
        return 6
    
# For loop that checks what the z value would be
for i in range(1, len(sequences)):
    a = sequences[0]
    b = sequences[i]
    
    names.append(b)
    vals.append(getVal(a,b))

Z = [x for _, x in sorted(zip(vals, names))]
Z.insert(0, sequences[0])
print(Z)
